{"version":3,"sources":["components/NavBar/navbar-component.jsx","components/list-item/list-item-component.jsx","views/home/home-view.jsx","views/404-view/404-view.jsx","App.js","serviceWorker.js","index.js"],"names":["NavbarComponent","Navbar","className","expand","Toggle","aria-controls","Collapse","id","Nav","Link","as","to","icon","faList","faCalendarDay","faCalendarWeek","faCalendarCheck","ListItem","props","Form","Group","controlId","Check","type","Control","onChange","e","editTextFn","value","content","disabled","disable","Text","date","Button","variant","onClick","editFn","faPencilAlt","deleteTask","faTrash","Home","titulo","addTaskState","Row","Col","md","editTaskState","faTimes","newTaskText","addTask","faPlus","tareas","map","task","key","NotFound","App","state","tasks","newTask","editTask","bind","editText","this","setState","taskObj","find","taskIndex","findIndex","taskArray","event","target","evento","text","taskContent","arregloIndices","length","fecha","Date","Intl","DateTimeFormat","day","month","year","format","newTasks","push","console","table","filter","Container","exact","path","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b5ccff15.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Navbar, Nav} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faList, faCalendarDay, faCalendarWeek, faCalendarCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { Link } from 'react-router-dom';\r\nimport './navbar-style.css';\r\n\r\nexport default function NavbarComponent(){\r\n    return (\r\n        <Navbar className=\"menu-desplegable\" expand=\"lg\">            \r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n              <Nav className=\"mr-auto\">\r\n                <Nav.Link className=\"nav-element\" as={Link} to=\"/\">\r\n                  <FontAwesomeIcon icon={faList} />{'Todas'}\r\n                </Nav.Link>\r\n                <Nav.Link className=\"nav-element\" as={Link} to=\"/hoy\">\r\n                    <FontAwesomeIcon icon={faCalendarDay} />Hoy\r\n                </Nav.Link>\r\n                <Nav.Link className=\"nav-element\" as={Link} to=\"/proxima-semana\">\r\n                    <FontAwesomeIcon icon={faCalendarWeek} />Pr√≥xima Semana\r\n                </Nav.Link>\r\n                <Nav.Link className=\"nav-element\" as={Link} to=\"/completadas\">\r\n                    <FontAwesomeIcon icon={faCalendarCheck} /> Completadas\r\n                </Nav.Link>                \r\n              </Nav>        \r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}","import React from 'react';\r\nimport {Form, Button} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport './list-item-style.css';\r\n\r\nexport default function ListItem(props){\r\n    \r\n    let editText = (e) => props.editTextFn(props.id, e);\r\n    return (\r\n        <Form className=\"form-flexbox\">\r\n            { /* Checkbox */ }\r\n            <Form.Group controlId=\"formBasicCheckbox\" className=\"checkbox-form\">\r\n                <Form.Check type=\"checkbox\" />\r\n            </Form.Group>\r\n            { /* Input type text */ }\r\n            <Form.Group className=\"input-text-form\">    \r\n                <Form.Control type=\"text\" onChange={editText} value={props.content} disabled={props.disable} />\r\n                <Form.Text className=\"text-muted\">\r\n                    {props.date}\r\n                </Form.Text>\r\n            </Form.Group>\r\n            { /* Buttons */ }\r\n            <Form.Group className=\"save-btn-form\">\r\n                {\r\n                    props.disable ? <div></div> : <Button variant=\"primary\">Guardar</Button>               \r\n                }\r\n            </Form.Group>\r\n            <Form.Group className=\"option-btn-form\">\r\n                <Button variant=\"warning\" onClick={() => props.editFn(props.id)}>\r\n                    <FontAwesomeIcon icon={faPencilAlt} />\r\n                </Button>\r\n            </Form.Group>\r\n            <Form.Group className=\"option-btn-form\">\r\n                <Button variant=\"danger\" onClick={() => props.deleteTask(props.id)}>\r\n                    <FontAwesomeIcon icon={faTrash} />\r\n                </Button>\r\n            </Form.Group>            \r\n        </Form>\r\n    )\r\n}","import React from 'react';\r\nimport { Row, Col, Button, Form } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport './home-style.css';\r\nimport ListItem from '../../components/list-item/list-item-component';\r\n\r\nexport default function Home(props){\r\n    return(\r\n        <div className=\"home-page\">\r\n            <h2>{props.titulo}</h2>\r\n            { /* Agregar una nueva tarea */ }\r\n\r\n            {\r\n                /* \r\n                \r\n                4. Utilizar el m√©todo onChange para el input y pasarle \r\n                el m√©todo que le corresponde\r\n                Nota: props.nombreAtributo\r\n                \r\n                5. Utilizar el m√©todo onClick para el bot√≥n y pasarle \r\n                el m√©todo que le corresponde  \r\n                \r\n                */\r\n            }\r\n\r\n            {\r\n                props.addTaskState ? (\r\n                    <Row className=\"contenedor-agregar-tarea\">\r\n                        <Col md={1}>\r\n                            <Button onClick={props.editTaskState}>\r\n                                <FontAwesomeIcon icon={faTimes} />                        \r\n                            </Button>                                                   \r\n                        </Col>\r\n                        <Col md={7}>\r\n                            <Form.Control type=\"text\" onChange={props.newTaskText} />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <Button onClick={props.addTask}>\r\n                                Guardar                        \r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                ) : (\r\n                    <Row className=\"contenedor-agregar-tarea\">\r\n                        { /* Bot√≥n para agregar una tarea */ }\r\n                        <Col md={6}>\r\n                            <Button onClick={props.editTaskState}>\r\n                                <FontAwesomeIcon icon={faPlus} />                        \r\n                            </Button>\r\n                            <span className=\"btn-label\">Agregar nueva tarea</span>\r\n                        </Col>\r\n                    </Row>\r\n                )\r\n            }\r\n            \r\n            {\r\n                props.tareas.map( task => {\r\n                    return(\r\n                        <ListItem \r\n                            key={task.id}\r\n                            id={task.id}\r\n                            content={task.content}\r\n                            date={task.date}\r\n                            disable={task.disabled}\r\n                            editFn={props.editFn}\r\n                            editTextFn={props.editTextFn}\r\n                            deleteTask={props.deleteTask}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )    \r\n}","import React from 'react';\r\n\r\nexport default function NotFound(){\r\n    return(\r\n        <h1>Error</h1>\r\n    );\r\n}","import React from 'react';\nimport {Container, Row, Col } from 'react-bootstrap';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport NavbarComponent from './components/NavBar/navbar-component';\n\nimport './App.css';\nimport Home from './views/home/home-view';\nimport NotFound from './views/404-view/404-view';\n\nclass App extends React.Component{\n\tconstructor(){\n\t  super();\n\t  this.state = {\n\t\ttasks: [\n\t\t  {\n\t\t\tid: 1,\n\t\t\tcontent: \"Realizar la planeaci√≥n para la clase\",\n\t\t\tdate: \"23 de Marzo 2020\",\n\t\t\tdisabled: true        \n\t\t  },\n\t\t  {\n\t\t\tid: 2,\n\t\t\tcontent: \"Lavar mi ropa\",\n\t\t\tdate: \"23 de Marzo 2020\",\n\t\t\tdisabled: true\n\t\t  },\n\t\t  {\n\t\t\tid: 3,\n\t\t\tcontent: \"Ordenar mi cuarto\",\n\t\t\tdate: \"23 de Marzo 2020\",\n\t\t\tdisabled: true\n\t\t  },\n\t\t  {\n\t\t\tid: 4,\n\t\t\tcontent: \"Pintar mi cuarto\",\n\t\t\tdate: \"23 de Marzo 2020\",\n\t\t\tdisabled: true\n\t\t  }\n\t\t],\n\t\taddTask: false,\n      \tnewTask: \"\",\n\t  }\n\t  //Ligar los m√©todos al contexto actual\n\t  this.editTask = this.editTask.bind(this);\n\t  this.editText = this.editText.bind(this);\n\t  this.deleteTask = this.deleteTask.bind(this);\n\t  this.editTaskState = this.editTaskState.bind(this);\n\t  this.newTaskText = this.newTaskText.bind(this);\n\t  this.addTask = this.addTask.bind(this);\n\t}\n\n\teditTaskState(){    \n\t\tthis.setState(state => ({ addTask: !state.addTask}));\n\t  }\n  \n\teditTask(id){\n\t  let taskObj = this.state.tasks.find( task => task.id === id);\n\t  let taskIndex = this.state.tasks.findIndex( task => task.id === id);\n\t  taskObj.disabled = !taskObj.disabled;\n  \n\t  let taskArray = this.state.tasks;\n\t  taskArray[taskIndex] = taskObj;\n  \n\t  this.setState({tasks: taskArray});    \n\t}\n  \n\teditText(id, event){\n\t  let taskObj = this.state.tasks.find( task => task.id === id);\n\t  let taskIndex = this.state.tasks.findIndex( task => task.id === id);\n\t  taskObj.content = event.target.value;\n  \n\t  let taskArray = this.state.tasks;\n\t  taskArray[taskIndex] = taskObj;\n  \n\t  this.setState({tasks: taskArray});\n\t}\n\t\n  /* Completar los siguientes m√©todos:\n    1. M√©todo newTaskText para modificar el estado de newTask cuando \n    cambie el valor del input (campo) para agregar una nueva tarea.\n    Nota: Debes de acceder a la propiedad evento.target.value para obtener el valor\n    del input adem√°s deber√°s de usar el m√©todo setState para actualizar el estado.\n  */\n \tnewTaskText(evento){\n\t\tlet text = evento.target.value;\n\t\tthis.setState(state => ({newTask : text}));\n\t}\n\n  /*\n  2. Completar el m√©todo addTask para guardar un objeto de tipo task \n  dentro del arreglo this.state.tasks\n  Nota: Usar el m√©todo push para agregar ese objeto, \n        recuerda que debes asignar un id distinto a cada una de las nuevas tareas\n        y usar el m√©todo setState para actualizar el estado        \n  */\n \taddTask(){\n\t\tlet taskContent = this.state.newTask;\n\t\tlet arregloIndices = this.state.tasks.map( task => task.id);\n      \tlet id = arregloIndices[arregloIndices.length-1] + 1; \n\t\tlet fecha = new Date();\n\t\tvar options = { day: 'numeric', month: 'long', year: 'numeric'  };\n\t\tfecha = new Intl.DateTimeFormat('es-ES', options).format(fecha);\n\t\tlet newTasks = this.state.tasks;\n\t\tnewTasks.push({\n\t\t\tid: id, \n\t\t\tcontent: taskContent,\n\t\t\tdate: fecha,\n\t\t\tdisabled: true,\n\t\t\t})\n\t\tconsole.table(newTasks);\n\t\tconsole.table(id);\n\t\tthis.setState(state=>({tasks : newTasks}));\n\t\t\n\t}\n\n\tdeleteTask(id){\n\t\tlet newTasks = this.state.tasks.filter(task => task.id !== id);\n\t\tthis.setState(state =>({tasks: newTasks}));\n\t}\n  \n\trender(){\n\t  return(\n\t\t<BrowserRouter>\n\t\t  <Container>\n\t\t\t<Row>\n\t\t\t  <Col md={3}>\n\t\t\t\t<NavbarComponent />\n\t\t\t  </Col>\n\t\t\t  <Col md={9} className=\"view-container\">\n\t\t\t\t<Switch>\n\t\t\t\t  <Route exact path='/'>            \n\t\t\t\t\t<Home \n\t\t\t\t\t  titulo=\"Todas las tareas\"\n\t\t\t\t\t  addTaskState={this.state.addTask}\n                \t  editTaskState={this.editTaskState} \n\t\t\t\t\t  tareas={this.state.tasks}\n\t\t\t\t\t  editFn={this.editTask}\n\t\t\t\t\t  editTextFn={this.editText}\n\t\t\t\t\t  deleteTask={this.deleteTask}\n\t\t\t\t\t  addTask={this.addTask}\n\t\t\t\t\t  newTaskText={this.newTaskText}\n\t\t\t\t\t/>\n\t\t\t\t  </Route>\n\t\t\t\t  <Route >\n\t\t\t\t\t<NotFound />\n\t\t\t\t  </Route>\n\t\t\t\t</Switch>         \n\t\t\t  </Col>\n\t\t\t</Row>\n\t\t  </Container>   \n\t\t</BrowserRouter>\n\t  )\n\t}\n  }\n  \n  export default App;\n  \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}